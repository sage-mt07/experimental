<?xml version="1.0" encoding="utf-8"?>
<TestRun id="7e4897fa-4f0c-4f66-8508-b0677c5e963f" name="@bc1b7d62b99d 2025-09-17 02:42:30" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-09-17T02:42:30.7494784+00:00" queuing="2025-09-17T02:42:30.7494784+00:00" start="2025-09-17T02:36:45.2076224+00:00" finish="2025-09-17T02:42:30.7548321+00:00" />
  <TestSettings name="default" id="41de5a2d-4577-421f-b489-bb46e56ef2d3">
    <Deployment runDeploymentRoot="_bc1b7d62b99d_2025-09-17_02_42_30" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="217b4ec7-3830-45c5-b185-18f7a41ccfae" testId="d4f95360-fa20-03e1-5810-a5fd78838e0d" testName="Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket" computerName="bc1b7d62b99d" duration="00:05:17.4178568" startTime="2025-09-17T02:42:30.6704776+00:00" endTime="2025-09-17T02:42:30.6704878+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="217b4ec7-3830-45c5-b185-18f7a41ccfae">
      <Output>
        <ErrorInfo>
          <Message>System.TimeoutException : CTAS/CSAS query for bar_tbimp_1m_live did not reach RUNNING within 300s</Message>
          <StackTrace>   at Kafka.Ksql.Linq.KsqlContext.WaitForQueryRunningAsync(String targetEntityName, TimeSpan timeout)
   at Kafka.Ksql.Linq.KsqlContext.WaitForDerivedQueriesRunningAsync(TimeSpan timeout)
   at Kafka.Ksql.Linq.KsqlContext.EnsureQueryEntityDdlAsync(Type type, EntityModel model)
   at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
   at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
   at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
   at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
   at Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.TestContext..ctor()
   at Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket()
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket" storage="/src/physicaltests/bin/release/net8.0/kafka.ksql.linq.tests.integration.dll" id="d4f95360-fa20-03e1-5810-a5fd78838e0d">
      <Execution id="217b4ec7-3830-45c5-b185-18f7a41ccfae" />
      <TestMethod codeBase="/src/physicalTests/bin/Release/net8.0/Kafka.Ksql.Linq.Tests.Integration.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests" name="Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="d4f95360-fa20-03e1-5810-a5fd78838e0d" executionId="217b4ec7-3830-45c5-b185-18f7a41ccfae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" passed="0" failed="1" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.5.6+bf9b858c26 (64-bit .NET 8.0.20)
[xUnit.net 00:00:00.18]   Discovering: Kafka.Ksql.Linq.Tests.Integration
[xUnit.net 00:00:00.24]   Discovered:  Kafka.Ksql.Linq.Tests.Integration
[xUnit.net 00:00:00.24]   Starting:    Kafka.Ksql.Linq.Tests.Integration
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW TOPICS;
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (simple DlqEnvelope): CREATE OR REPLACE STREAM dead_letter_queue (`Topic` VARCHAR KEY, `Partition` INT KEY, `Offset` BIGINT KEY, TimestampUtc VARCHAR, IngestedAtUtc VARCHAR, PayloadFormatKey VARCHAR, PayloadFormatValue VARCHAR, SchemaIdKey VARCHAR, SchemaIdValue VARCHAR, KeyIsNull BOOLEAN, ErrorType VARCHAR, ErrorMessageShort VARCHAR, StackTraceShort VARCHAR, ErrorFingerprint VARCHAR, ApplicationId VARCHAR, ConsumerGroup VARCHAR, Host VARCHAR, Headers MAP&lt;STRING, STRING&gt;) WITH (KAFKA_TOPIC='dead-letter-queue', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO_SCHEMA_FULL_NAME='kafka_ksql_linq_messaging.dead_letter_queue_valueAvro', PARTITIONS=1, REPLICAS=1);
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE OR REPLACE STREAM dead_letter_queue (`Topic` VARCHAR KEY, `Partition` INT KEY, `Offset` BIGINT KEY, TimestampUtc ...
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED DEAD-LETTER-QUEUE;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW TOPICS;
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (simple Tick): CREATE OR REPLACE STREAM ticks_tbimp (Broker VARCHAR KEY, Symbol VARCHAR KEY, TimestampUtc TIMESTAMP, Bid DECIMAL(18, 2)) WITH (KAFKA_TOPIC='ticks_tbimp', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO_SCHEMA_FULL_NAME='kafka_ksql_linq_tests_integration.ticks_tbimp_valueAvro', TIMESTAMP='TimestampUtc', PARTITIONS=1, REPLICAS=1);
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE OR REPLACE STREAM ticks_tbimp (Broker VARCHAR KEY, Symbol VARCHAR KEY, TimestampUtc TIMESTAMP, Bid DECIMAL(18, 2)...
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=DESCRIBE EXTENDED TICKS_TBIMP;
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (derived bar_tbimp_1s_final): CREATE TABLE bar_tbimp_1s_final WITH (KAFKA_TOPIC='bar_tbimp_1s_final', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO_SCHEMA_FULL_NAME='bar_tbimp_ksql.bar_tbimp_1s_final_valueAvro') AS
      SELECT o.BROKER AS Broker, o.SYMBOL AS Symbol, WINDOWSTART AS BucketStart, EARLIEST_BY_OFFSET(Bid) AS Open, MAX(Bid) AS High, MIN(Bid) AS Low, LATEST_BY_OFFSET(Bid) AS Close
      FROM TICKS_TBIMP o WINDOW TUMBLING (SIZE 1 SECONDS)
      GROUP BY o.BROKER, o.SYMBOL
      EMIT FINAL;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE TABLE bar_tbimp_1s_final WITH (KAFKA_TOPIC='bar_tbimp_1s_final', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AV...
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (derived bar_tbimp_1s_final_s): CREATE STREAM bar_tbimp_1s_final_s (BROKER VARCHAR KEY, SYMBOL VARCHAR KEY, BUCKETSTART TIMESTAMP KEY, OPEN DECIMAL(18, 2), HIGH DECIMAL(18, 2), LOW DECIMAL(18, 2), CLOSE DECIMAL(18, 2)) WITH (KAFKA_TOPIC='bar_tbimp_1s_final', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', PARTITIONS=1, REPLICAS=1, VALUE_AVRO_SCHEMA_FULL_NAME='bar_tbimp_ksql.bar_tbimp_1s_final_s_valueAvro');
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE STREAM bar_tbimp_1s_final_s (BROKER VARCHAR KEY, SYMBOL VARCHAR KEY, BUCKETSTART TIMESTAMP KEY, OPEN DECIMAL(18, ...
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (derived bar_tbimp_1m_live): CREATE TABLE bar_tbimp_1m_live WITH (KAFKA_TOPIC='bar_tbimp_1m_live', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO_SCHEMA_FULL_NAME='bar_tbimp_ksql.bar_tbimp_1m_live_valueAvro') AS
      SELECT o.BROKER AS Broker, o.SYMBOL AS Symbol, WINDOWSTART AS BucketStart, EARLIEST_BY_OFFSET(o.OPEN) AS Open, MAX(o.HIGH) AS High, MIN(o.LOW) AS Low, LATEST_BY_OFFSET(o.CLOSE) AS Close
      FROM bar_tbimp_1s_final_s o WINDOW TUMBLING (SIZE 1 MINUTES, GRACE PERIOD 2 SECONDS)
      GROUP BY o.BROKER, o.SYMBOL
      EMIT CHANGES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE TABLE bar_tbimp_1m_live WITH (KAFKA_TOPIC='bar_tbimp_1m_live', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO...
info: Kafka.Ksql.Linq.KsqlContext[0]
      KSQL DDL (derived bar_tbimp_5m_live): CREATE TABLE bar_tbimp_5m_live WITH (KAFKA_TOPIC='bar_tbimp_5m_live', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO_SCHEMA_FULL_NAME='bar_tbimp_ksql.bar_tbimp_5m_live_valueAvro') AS
      SELECT o.BROKER AS Broker, o.SYMBOL AS Symbol, WINDOWSTART AS BucketStart, EARLIEST_BY_OFFSET(o.OPEN) AS Open, MAX(o.HIGH) AS High, MIN(o.LOW) AS Low, LATEST_BY_OFFSET(o.CLOSE) AS Close
      FROM bar_tbimp_1s_final_s o WINDOW TUMBLING (SIZE 5 MINUTES, GRACE PERIOD 3 SECONDS)
      GROUP BY o.BROKER, o.SYMBOL
      EMIT CHANGES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=CREATE TABLE bar_tbimp_5m_live WITH (KAFKA_TOPIC='bar_tbimp_5m_live', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO', VALUE_AVRO...
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
info: Kafka.Ksql.Linq.KsqlContext[0]
      ksql execute: EXECUTE SQL=SHOW QUERIES;
fail: Kafka.Ksql.Linq.KsqlContext[0]
      KsqlContext initialization failed: CTAS/CSAS query for bar_tbimp_1m_live did not reach RUNNING within 300s 
      System.TimeoutException: CTAS/CSAS query for bar_tbimp_1m_live did not reach RUNNING within 300s
         at Kafka.Ksql.Linq.KsqlContext.WaitForQueryRunningAsync(String targetEntityName, TimeSpan timeout)
         at Kafka.Ksql.Linq.KsqlContext.WaitForDerivedQueriesRunningAsync(TimeSpan timeout)
         at Kafka.Ksql.Linq.KsqlContext.EnsureQueryEntityDdlAsync(Type type, EntityModel model)
         at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
         at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
         at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:05:17.71]       System.TimeoutException : CTAS/CSAS query for bar_tbimp_1m_live did not reach RUNNING within 300s
[xUnit.net 00:05:17.71]       Stack Trace:
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.WaitForQueryRunningAsync(String targetEntityName, TimeSpan timeout)
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.WaitForDerivedQueriesRunningAsync(TimeSpan timeout)
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.EnsureQueryEntityDdlAsync(Type type, EntityModel model)
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.RegisterSchemasAndMaterializeAsync()
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.InitializeWithSchemaRegistration()
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext.InitializeCore(ILoggerFactory loggerFactory)
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.KsqlContext..ctor(KsqlDslOptions options, ILoggerFactory loggerFactory)
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.TestContext..ctor()
[xUnit.net 00:05:17.71]            at Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket()
[xUnit.net 00:05:17.71]         --- End of stack trace from previous location ---
[xUnit.net 00:05:17.71]   Finished:    Kafka.Ksql.Linq.Tests.Integration
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="bc1b7d62b99d" outcome="Error" timestamp="2025-09-17T02:42:30.6689998+00:00">
        <Text>[xUnit.net 00:05:17.71]     Kafka.Ksql.Linq.Tests.Integration.TimeBucketImportTumblingTests.Import_Ticks_Define_Tumbling_Query_Then_Extract_Bars_Via_TimeBucket [FAIL]</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>