services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx512m"    
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.9.2
    depends_on:
      - zookeeper
    ports:
      - "39092:39092"     # host access for tests
    mem_limit: 10g
    memswap_limit: 10g
    environment:
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx2g"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Dual listeners: internal (29092) + host (39092)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:39092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://127.0.0.1:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MESSAGE_MAX_BYTES: 2147483647
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2147483647
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 2147483647
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 2147483647
      # CRITICAL FIX: Enable auto-topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - kafka_data:/var/lib/kafka/data


  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.9.2
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "18088:8088"
    mem_limit: 12g
    memswap_limit: 12g      
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: "${KSQL_SERVICE_ID:-ksql_service_1}"
      KSQL_KSQL_COMMAND_TOPIC_REPLICATION_FACTOR: "1"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: "1"
      # Start from beginning to avoid missing records relative to AddAsync
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      KSQL_KSQL_STREAMS_PERSISTENT_QUERY_NAME_PREFIX: "${KSQL_PERSISTENT_PREFIX:-query_}"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      
      # ===========================================
      # 初期化処理最適化設定
      # ===========================================
      
      # 並列処理強化（より積極的に設定）
      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 8
      
      # コミット間隔をさらに短縮
      KSQL_KSQL_STREAMS_COMMIT_INTERVAL_MS: "250"
      
      # CRITICAL: トピック作成タイムアウト延長
      # KSQL_KSQL_STREAMS_TOPIC_CREATION_TIMEOUT_MS: "120000"
      
      # CRITICAL: クエリプランニングタイムアウト延長  
      KSQL_KSQL_QUERY_PLANNING_TIMEOUT_MS: "180000"
      
      # クエリ起動の並列度向上
      KSQL_KSQL_QUERY_PULL_TABLE_SCAN_ENABLED: "true"
      
      # ===========================================
      # レイテンシ削減設定
      # ===========================================
      
      # プロデューサー最適化
      KSQL_KSQL_STREAMS_PRODUCER_LINGER_MS: "0"
      KSQL_KSQL_STREAMS_PRODUCER_BATCH_SIZE: "1024"
      
      # コンシューマー最適化
      KSQL_KSQL_STREAMS_CONSUMER_FETCH_MIN_BYTES: "1"
      KSQL_KSQL_STREAMS_CONSUMER_FETCH_MAX_WAIT_MS: "100"
      
      # アイドル時間短縮
      KSQL_KSQL_STREAMS_MAX_TASK_IDLE_MS: "100"
      
      # スレッド間バランス最適化
      KSQL_KSQL_STREAMS_BUFFERED_RECORDS_PER_PARTITION: "100"
      
      # ===========================================
      # 状態ストア最適化
      # ===========================================
      
      # 状態ディレクトリ
      KSQL_KSQL_STREAMS_STATE_DIR: "/tmp/kafka-streams"
      
      # ===========================================
      # KSQL固有最適化
      # ===========================================
      
      # レプリケーション設定
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: "1"
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: "1"
      
      # CRITICAL: シンクトピック設定
      KSQL_KSQL_SINK_PARTITIONS: "1"
      KSQL_KSQL_SINK_REPLICAS: "1"
      
      # CRITICAL: Kafka Streams内部トピック自動作成
      KSQL_KSQL_STREAMS_AUTO_CREATE_TOPICS_ENABLE: "true"
      KSQL_KSQL_STREAMS_NUM_PARTITIONS: "1"
      
      # ストリームキャッシュ無効化（即伝播のため）
      KSQL_KSQL_STREAMS_CACHE_MAX_BYTES_BUFFERING: "0"
      
      # ===========================================
      # タイムアウト設定
      # ===========================================
      
      # CRITICAL: クエリタイムアウト延長
      KSQL_KSQL_QUERY_TIMEOUT_MS: "450000"               # 7.5分
      KSQL_KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG: "9223372036854775807"
      
      # ===========================================
      # JVM最適化
      # ===========================================
      
      # JVM設定（シンプル・安全）
      KSQL_HEAP_OPTS: "-Xms3g -Xmx4g"
      
      # ===========================================
      # ログ設定
      # ===========================================
      
      # ログレベル（パフォーマンス重視）
      KSQL_LOG4J_ROOT_LOGLEVEL: INFO
      
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8088/healthcheck"]
      interval: 3s
      timeout: 5s
      retries: 20
      start_period: 90s
        
  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "18081:8081"
    mem_limit: 4g
    memswap_limit: 4g
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_HEAP_OPTS: "-Xms512m -Xmx2g"

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.9.2
    depends_on:
      ksqldb-server:
        condition: service_healthy
    entrypoint: /bin/sh
    tty: true


    
  runner:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
      ksqldb-server:
        condition: service_healthy
    working_dir: /src
    volumes:
      - ../:/src
    mem_limit: 8g
    memswap_limit: 8g
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQLDB_URL: http://ksqldb-server:8088
      KSQL_DDL_LOG_PATH: /src/reports/physical/ddl.log
      # CRITICAL: タイムアウトを延長
      KSQL_QUERY_RUNNING_TIMEOUT_SECONDS: 300
      # Require consecutive RUNNING checks and stability window (sec)
      KSQL_QUERY_RUNNING_CONSECUTIVE: 5
      KSQL_QUERY_RUNNING_STABILITY_WINDOW_SECONDS: 15
    entrypoint: ["/bin/sh","-lc","/src/physicalTests/Runners/runner-entrypoint.sh"]

volumes:
  kafka_data:
    external: false    
    